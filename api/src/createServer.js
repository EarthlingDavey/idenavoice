import { typeDefs } from './graphql-schema';
import { ApolloServer, PubSub } from 'apollo-server-express';
import express from 'express';
const cors = require('cors');
import neo4j from 'neo4j-driver';
import { makeAugmentedSchema } from 'neo4j-graphql-js';
const cookieParser = require('cookie-parser');
import dotenv from 'dotenv';
import startSession from './auth/v1/start-session';
import authenticate from './auth/v1/authenticate';
import callback from './auth/v1/callback';
var bodyParser = require('body-parser');
const resolvers = require('./resolvers');
const http = require('http');

const corsOptions = {
  credentials: true,
  origin: ['http://localhost', 'http://ui'],
};

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const schema = makeAugmentedSchema({
  typeDefs,
  resolvers,
  config: {
    mutation: false,
  },
  allowUndefinedInResolve: true,
});

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'neo4j'
  )
);

// function mergeDriver(req, res) {
//   req.driver = driver;
//   return { req;
// }

// const pubsub = new PubSub();

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */

async function createServer() {
  const pubsub = new PubSub();
  const server = new ApolloServer({
    context({ req, res }) {
      // make request cookies available to all resolvers
      return {
        res,
        cookies: req ? req.cookies : null,
        driver,
        pubsub,
      };
    },
    schema: schema,
    introspection: true,
    playground: true,
    cors: cors(corsOptions),
  });
  return server;
}

module.exports = createServer;
